@{
    ViewData["Title"] = "Login";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SIMS_APDP</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .login-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: 100%;
            max-width: 400px;
        }
        .login-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .login-body {
            padding: 40px;
        }
        .form-control {
            border-radius: 10px;
            border: 2px solid #e9ecef;
            padding: 12px 15px;
            transition: all 0.3s ease;
        }
        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        .form-control.is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        .btn-login {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 10px;
            padding: 12px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        .btn-login:disabled {
            opacity: 0.6;
            transform: none;
        }
        .alert {
            border-radius: 10px;
            border: none;
        }
        .register-link {
            text-align: center;
            margin-top: 20px;
        }
        .register-link a {
            color: #667eea;
            text-decoration: none;
            font-weight: 600;
        }
        .register-link a:hover {
            text-decoration: underline;
        }
        .invalid-feedback {
            display: block;
            font-size: 0.875em;
            margin-top: 0.25rem;
        }
        .spinner-border-sm {
            width: 1rem;
            height: 1rem;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-header">
            <h2><i class="fas fa-graduation-cap me-2"></i>SIMS_APDP</h2>
            <p class="mb-0">Student Information Management System</p>
        </div>
        
        <div class="login-body">
            <div id="alert-container"></div>
            
            <form id="loginForm" novalidate>
                <div class="mb-3">
                    <label for="username" class="form-label">
                        <i class="fas fa-user me-2"></i>Username
                    </label>
                    <input type="text" class="form-control" id="username" name="username" required>
                    <div class="invalid-feedback" id="username-error"></div>
                </div>
                
                <div class="mb-3">
                    <label for="password" class="form-label">
                        <i class="fas fa-lock me-2"></i>Password
                    </label>
                    <input type="password" class="form-control" id="password" name="password" required>
                    <div class="invalid-feedback" id="password-error"></div>
                </div>
                
                <button type="submit" class="btn btn-primary btn-login w-100" id="loginBtn">
                    <span id="loginBtnText">
                        <i class="fas fa-sign-in-alt me-2"></i>Login
                    </span>
                    <span id="loginBtnSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;"></span>
                </button>
            </form>
            
            <div class="register-link">
                <p>Don't have an account? <a href="/Auth/Register">Register now</a></p>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const form = document.getElementById('loginForm');
        const usernameInput = document.getElementById('username');
        const passwordInput = document.getElementById('password');
        const loginBtn = document.getElementById('loginBtn');
        const loginBtnText = document.getElementById('loginBtnText');
        const loginBtnSpinner = document.getElementById('loginBtnSpinner');

        // Clear validation on input
        [usernameInput, passwordInput].forEach(input => {
            input.addEventListener('input', () => {
                input.classList.remove('is-invalid');
                const errorElement = document.getElementById(input.id + '-error');
                if (errorElement) errorElement.textContent = '';
            });
        });

        // Prefill from sessionStorage after successful registration
        (function prefillFromRegistration(){
            try {
                const msg = sessionStorage.getItem('registrationSuccess');
                const u = sessionStorage.getItem('prefillUsername');
                const p = sessionStorage.getItem('prefillPassword');
                if (msg) {
                    showAlert(msg, 'success');
                    sessionStorage.removeItem('registrationSuccess');
                }
                if (u) {
                    usernameInput.value = u;
                    sessionStorage.removeItem('prefillUsername');
                }
                if (p) {
                    passwordInput.value = p;
                    sessionStorage.removeItem('prefillPassword');
                }
            } catch {}
        })();

        // Form validation
        function validateForm() {
            let isValid = true;
            
            // Validate username
            if (!usernameInput.value.trim()) {
                usernameInput.classList.add('is-invalid');
                document.getElementById('username-error').textContent = 'Username is required';
                isValid = false;
            } else if (usernameInput.value.trim().length < 3) {
                usernameInput.classList.add('is-invalid');
                document.getElementById('username-error').textContent = 'Username must be at least 3 characters';
                isValid = false;
            }
            
            // Validate password
            if (!passwordInput.value) {
                passwordInput.classList.add('is-invalid');
                document.getElementById('password-error').textContent = 'Password is required';
                isValid = false;
            } else if (passwordInput.value.length < 6) {
                passwordInput.classList.add('is-invalid');
                document.getElementById('password-error').textContent = 'Password must be at least 6 characters';
                isValid = false;
            }
            
            return isValid;
        }

        // Show loading state
        function setLoading(loading) {
            loginBtn.disabled = loading;
            if (loading) {
                loginBtnText.style.display = 'none';
                loginBtnSpinner.style.display = 'inline-block';
            } else {
                loginBtnText.style.display = 'inline';
                loginBtnSpinner.style.display = 'none';
            }
        }

        // Show alert
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alert-container');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            alertContainer.innerHTML = '';
            alertContainer.appendChild(alertDiv);
        }

        // Handle form submission
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Clear previous errors
            [usernameInput, passwordInput].forEach(input => {
                input.classList.remove('is-invalid');
                const errorElement = document.getElementById(input.id + '-error');
                if (errorElement) errorElement.textContent = '';
            });
            
            // Validate form
            if (!validateForm()) {
                return;
            }
            
            const username = usernameInput.value.trim();
            const password = passwordInput.value;
            
            setLoading(true);
            
            try {
                const response = await fetch('/api/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        username: username,
                        password: password
                    })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showAlert('Login successful! Redirecting...', 'success');
                    try {
                        if (data && data.token) {
                            localStorage.setItem('token', data.token);
                            localStorage.setItem('username', data.username || '');
                            localStorage.setItem('role', data.role || '');
                        }
                    } catch {}
                    const roleHint = (data && data.role) || '';
                    let target = roleHint === 'Admin' ? '/Admin/Dashboard' : roleHint === 'Teacher' ? '/Teacher/Dashboard' : roleHint === 'Student' ? '/Student/Dashboard' : '/Auth/RedirectAfterLogin';
                    // Ensure server has picked up the cookie by polling once or twice
                    const tryGo = async (attempt = 0) => {
                        try {
                            const r = await fetch('/api/auth/test-auth', { cache: 'no-store' });
                            if (r.ok) {
                                const j = await r.json();
                                if (j && j.isAuthenticated && j.role) {
                                    if (j.role === 'Admin') target = '/Admin/Dashboard';
                                    else if (j.role === 'Teacher') target = '/Teacher/Dashboard';
                                    else if (j.role === 'Student') target = '/Student/Dashboard';
                                    window.location.replace(target);
                                    return;
                                }
                            }
                        } catch {}
                        if (attempt < 3) return setTimeout(() => tryGo(attempt + 1), 200);
                        window.location.replace(target);
                    };
                    tryGo();
                } else {
                    // Handle specific error messages
                    let errorMessage = 'Login failed!';
                    
                    if (data.message) {
                        if (data.message.includes('Invalid username or password')) {
                            errorMessage = 'Invalid username or password. Please check your credentials.';
                        } else if (data.message.includes('User not found')) {
                            errorMessage = 'Username not found. Please check your username.';
                        } else if (data.message.includes('Password verification failed')) {
                            errorMessage = 'Incorrect password. Please try again.';
                        } else {
                            errorMessage = data.message;
                        }
                    }
                    
                    showAlert(errorMessage, 'danger');
                }
                            } catch (error) {
                    console.error('Error:', error);
                    if (error.name === 'TypeError' && error.message.includes('fetch')) {
                        showAlert('Network error. Please check your connection and try again.', 'danger');
                    } else {
                        showAlert('An unexpected error occurred. Please try again.', 'danger');
                    }
                } finally {
                    setLoading(false);
                }
        });
    </script>
</body>
</html>
